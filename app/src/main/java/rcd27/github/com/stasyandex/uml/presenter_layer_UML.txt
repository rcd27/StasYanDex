@startuml

interface Presenter{
onStop(): void
}

abstract class BasePresenter{
#responseData: Model
#compositeSubscription: CompositeSubscription
--
Dagger injection
--
#addSubscription(subscription: Subscription): void
+@Override onStop(): void
}

class TranslationPresenter{
-view: TranslationView
-context: Context
-languagesMap: Map<String,String>
--
{abstract}+@Inject TranslationPresenter()
+TranslationPresenter(view: TranslationView, context: Context)
--
+getTranslationForTextFromEditText(): void
-getSubscriptionForTranslated(text: String): Subscription
+getDirection(): String
+onChooseLanguage(directionInt: int): void
+handleIntentForSelectedLanguages(intent: Intent): void
+switchToHistory(): void
+saveToHistory(current: Translation): void
}

class DictionaryPresenter{
-view: DictionaryView
--
{abstract}+@Inject DictionaryPresenter()
+DictionaryPresenter(view: DictionaryView)
--
+getDictionaryResponse(direction: String, text: String): void
-getSubscriptionForDictionaryDefinition(direction: String, text: String): Subscription
}


Presenter<|.. BasePresenter : implements
BasePresenter *-l- Model

BasePresenter<|-- DictionaryPresenter : < subscription
BasePresenter<|-- TranslationPresenter : < subscription

@enduml